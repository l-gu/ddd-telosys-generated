/*
 * Generated by Telosys ( https://www.telosys.org/ )
 * 2022-04-12 (15:15:28)
 */

package org.demo.orders.application.service.impl;

import java.util.Optional;

import javax.inject.Inject;

import org.demo.orders.application.exception.CatalogException;
import org.demo.orders.application.exception.ErrorCode;
import org.demo.orders.application.mapper.CatalogMapper;
import org.demo.orders.application.service.CatalogCommandService;
import org.demo.orders.domain.model.Catalog;
import org.demo.orders.domain.model.CatalogFactoryRestDto;
import org.demo.orders.domain.model.CatalogId;
import org.demo.orders.domain.repository.CatalogRepository;
import org.demo.orders.rest.dto.CatalogRestDto;
import org.springframework.stereotype.Component;

/**
 * Service for "COMMANDS" (database write operations)
 * Entity Catalog
 *
 * @author @{AUTHOR}
 */
@Component
public class CatalogCommandServiceImpl implements CatalogCommandService {

	@Inject
	private CatalogRepository catalogRepository;
	
	@Inject
	private CatalogMapper catalogMapper;
	
	
	private CatalogId buildId(short year, short quarter) {
		return new CatalogId(year, quarter);
	}

	/**
	 * Insert a new Catalog 
	 * @param catalogRestDto Data Transfer Object
	 * @return created aggregate
	 */
 	@Override
	public CatalogRestDto insertCatalog(CatalogRestDto catalogRestDto) {
		Catalog catalog = CatalogFactoryRestDto.createCatalog(catalogRestDto);
		catalogRepository.insert(catalog);
		//return catalog;
		return catalogMapper.toDTO(catalog);
	}

	/**
	 * Delete Catalog with the given id
	 * @param year id
	 * @param quarter id
	 */
 	@Override
	public void deleteCatalog(short year, short quarter) {  

		Optional<Catalog> catalog = catalogRepository.findById(buildId(year, quarter));

		if (catalog.isPresent()) {
			catalogRepository.delete(catalog.get());
		} else {
			throw new CatalogException(ErrorCode.DELETE_NOT_FOUND); 
		}
	}
	
	/**
	 * Save Catalog (update or create)
	 * @param year id
	 * @param quarter id
	 * @param catalogRestDto Data Transfer Object
	 * @return true if created (else false)
	 */
 	@Override
	public boolean saveCatalog(short year, short quarter, CatalogRestDto catalogRestDto) {
		Catalog catalog = CatalogFactoryRestDto.createCatalog(catalogRestDto);
		Catalog current = catalogRepository.findById(buildId(year, quarter)).orElse(null);
		if (current == null) {
			// currentEntity not found => create a new one
			catalogRepository.insert(catalog);
			return true;
		}
		else {
			// currentEntity found => update from given data
			update(current, catalog);
			return false;
		}
	}

    private void update(Catalog currentEntity, Catalog newEntity) {

		//--- You can update partially the existing entity
		// Call here specific update methods
		//// currentEntity.doSomething(newEntity.getXxx(), newEntity.getYyy());
		// Update
		//// catalogRepository.update(currentEntity);

		//--- You can also just update the entity using the new one
		catalogRepository.update(newEntity);		
    }
}
